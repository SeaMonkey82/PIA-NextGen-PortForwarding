#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/bin

# Vers: 1.0 beta
# Date: 2020-10-27
# Based on: https://github.com/fm407/PIA-NextGen-PortForwarding
# Dependencies: xmlstarlet jq
# Compatibility: pfSense 2.4>
# Before starting setup PIA following this guide: https://blog.networkprofile.org/private-internet-access-vpn-on-pfsense/
# If qBittorrent is using an SSL certificate generated by an internal CA, you will need to add the CA cert to 
# /etc/ssl/cert.pem or curl will not work!
# pfSense email notifications are configured under System:Advanced:Notifications

####### Adjust all of the following variables #######

# PIA Credentials
piauser='p0123456'
piapass='aBcDe12345'

# qBittorrent WebUI
qbtuser='alphanumericuser'
qbtpass='alphanumericpassword'
qbthost='https://localhost.localdomain'
qbtwebuiport='8081'

# OpenVPN interface name
ovpniface='ovpnc1'

# Alias name for qBittorrent PORT. Not the actual port number!
portalias='PIAPort'

######################## MAIN #########################
# Wait for VPN interface to get fully UP
# Increase this if you have very slow connection or connecting to PIA servers with huge response times
sleep 10

# pfSense config file and tempconfig location
conffile='/cf/conf/config.xml'
tmpconffile='/tmp/tmpconfig.xml'

###### Nextgen PIA port forwarding #######
# If your connection is unstable you might need to adjust these.
curl_max_time=15
curl_retry=5
curl_retry_delay=15

get_auth_token () {
  tok=$(curl --interface ${ovpniface} --insecure --silent --show-error --request POST --max-time $curl_max_time \
    --header "Content-Type: application/json" \
    --data "{\"username\":\"$piauser\",\"password\":\"$piapass\"}" \
    "https://www.privateinternetaccess.com/api/client/v2/token" | jq -r '.token')
  tok_rc=$?
  if [ "$tok_rc" -ne 0 ]; then
    logger "[PIA-API] Error! Failed to acquire auth token!"
    exit 1
  fi
}
get_auth_token > /dev/null 2>&1

bind_port () {
  pf_bind=$(curl --interface ${ovpniface} --insecure --get --silent --show-error \
    --retry $curl_retry --retry-delay $curl_retry_delay --max-time $curl_max_time \
    --data-urlencode "payload=$pf_payload" \
    --data-urlencode "signature=$pf_getsignature" \
    "https://$pf_host:19999/bindPort")
  if [ "$(echo "$pf_bind" | jq -r .status)" != "OK" ]; then
    logger "[PIA-API] Error! Failed to bind received port!"
    exit 1
  fi
}

get_sig () {
  pf_getsig=$(curl --interface ${ovpniface} --insecure --get --silent --show-error \
    --retry $curl_retry --retry-delay $curl_retry_delay --max-time $curl_max_time \
    --data-urlencode "token=$tok" \
    "https://$pf_host:19999/getSignature")
  if [ "$(echo "$pf_getsig" | jq -r .status)" != "OK" ]; then
    logger "[PIA-API] Error! Failed to receive Signature!"
    exit 1
  fi
  pf_payload=$(echo "$pf_getsig" | jq -r .payload)
  pf_getsignature=$(echo "$pf_getsig" | jq -r .signature)
  pf_port=$(echo "$pf_payload" | b64decode -r | jq -r .port)
  pf_token_expiry_raw=$(echo "$pf_payload" | b64decode -r | jq -r .expires_at)
  pf_token_expiry=$(date -jf %Y-%m-%dT%H:%M:%S "$pf_token_expiry_raw" +%s)
}

# Rebind every 15 mins (same as desktop app)
pf_bindinterval=$(( 15 * 60))

# Get a new token when the current one has less than this remaining
# Defaults to 7 days (same as desktop app)
pf_minreuse=$(( 60 * 60 * 24 * 7 ))

pf_remaining=0
vpn_ip=$(traceroute -i ${ovpniface} -m 1 privateinternetaccess.com | tail -n 1 | awk '{print $2}')
pf_host="$vpn_ip"
log_cycle=0
reloadcfg=0

while true; do
  pf_remaining=$(( pf_token_expiry - $(date +%s) ))
  # Get a new pf token as the previous one will expire soon
  if [ $pf_remaining -lt $pf_minreuse ]; then
    get_sig
    bind_port
  fi
  
  # Some checks that we received valid port number and not some garbage.
  if [ -z "$pf_port" ]; then
    pf_port='0'
    logger "[PIA] You are not connected to a PIA region that supports port forwarding. Aborting..."
    exit 1
  elif ! [ "$pf_port" -eq "$pf_port" ] 2> /dev/null; then
    logger "[PIA] Fatal error! Value $pf_port is not a number. PIA API has most probably changed. Manual check necessary."
    exit 1
  elif [ "$pf_port" -lt 1024 ] || [ "$pf_port" -gt 65535 ]; then
    logger "[PIA] Fatal error! Value $pf_port outside allowed port range. PIA API has most probably changed. Manual check necessary."
    exit 1
  fi
  
  # Get current NAT port number using xmlstarlet to parse the config file.
  natport=$(xml sel -t -v "//alias[name=\"$portalias\"]/address" $conffile)

  # If the acquired port is the same as already configured do not pointlessly reload config.
  if [ "$natport" -eq "$pf_port" ]; then
    reloadcfg=0
    if [ "$log_cycle" -lt 3 ]; then
      logger "[PIA] Acquired port $pf_port equals the already configured port $natport - no action required."
      log_cycle=$((log_cycle+1))
    elif [ "$log_cycle" -eq 3 ]; then
      logger "[PIA] Acquired port $pf_port equals the already configured port $natport - no action required. Silencing further messages."
      log_cycle=$((log_cycle+1))
    fi
	else
    # If the port has changed update the tempconfig file and reset the log cycle.
    logger "[PIA] Acquired NEW forwarding port: $pf_port, current NAT rule port: $natport"
    xml ed -u "//alias[name=\"$portalias\"]/address" -v $pf_port $conffile > $tmpconffile
    log_cycle=0
    reloadcfg=1
  fi

  # Validate the XML file just to ensure we don't nuke whole configuration
  xml val -q $tmpconffile
  xmlval=$?
  if [ "$xmlval" -gt 0 ]; then
	 logger "[PIA] Fatal error! Updated tempconf file $tmpconffile does not have valid XML format. Verify that the port alias is correct in script header and exists in pfSense Alias list"
	 exit 1
  fi

  # If the updated tempconfig is valid and the port changed update and reload config, update qBittorrent, and notify by email
  if [ "$reloadcfg" -eq 1 ]; then
    cp $conffile ${conffile}.bck
    cp $tmpconffile $conffile
    # Force pfSense to re-read it's config and reload the rules.
    rm /tmp/config.cache
    /etc/rc.filter_configure
    logger "[PIA] New port $pf_port updated in pfSense config file."

    # Update qBittorrent
    SID=`curl -i --header "Referer: $qbthost:$qbtwebuiport" --data "username=$qbtuser&password=$qbtpass" $qbthost:$qbtwebuiport/api/v2/auth/login | grep SID | awk '{ print $2 }' | sed 's/;//'`
    curl $qbthost:$qbtwebuiport/api/v2/app/setPreferences --cookie "$SID" -d "json=%7B%22listen_port%22%3A$pf_port%7D"

    # Send notification email
    INTERFACEIP=`dig @resolver1.opendns.com ovpnc1 myip.opendns.com +short`
    echo "qBittorrent at ${qbthost}:${qbtwebuiport} should be connectable on port $pf_port at $INTERFACEIP" | /usr/local/bin/php /usr/local/bin/mail.php -s"New qBittorrent Port Number on ${qbthost}" &
  fi

  sleep $pf_bindinterval &
  wait $!
  bind_port

done
